encoding  utf-8
#_____________________________________________________________
#                                                             |
#             THIS IS A THERION LAYOUT DEFINITION FILE        |
#                                                             |
#             it contains the redefinition for a layout       |
#             with a Tanguy approved style                    |
#                                                             |
#             the format is good, trust me                    |
#_____________________________________________________________|

# input the custom point, line and area definitions
input metapost/points.thl
input metapost/lines.thl
input metapost/areas.thl
input metapost/scalebar_arrow.thl

layout detailed-e

  # copy the metapost definitions
  copy custom_points
  copy custom_lines
  copy custom_areas
  copy custom_arrow
  copy custom_scalebar

symbol-assign line survey MY
symbol-color line rope [70 10 0]

code metapost
#_____________________________________________________________
#                                                             |
#                            LEGEND ITEMS                     |
#_____________________________________________________________|

   # VERTICAL GRID less obnoxious

    def s_vgrid (expr xpos, ypos, xsize, ysize) =
      pickup PenB;
      if ypos < 1 : if xpos < 0: draw (-10, ysize) -- (-10, 0);
      draw (-10, ysize/5) -- (-7, ysize/5);
      draw (-10, 2*ysize/5) -- (-7, 2*ysize/5);
      draw (-10, 3*ysize/5) -- (-7, 3*ysize/5);
      draw (-10, 4*ysize/5) -- (-7, 4*ysize/5);
       fi fi;

      if xpos <0 : draw (-10,0) -- (0,0) fi;
      pickup PenD;
      draw (if xpos <0: 0 else: -xsize/2 fi,0) -- (if xpos > 0: 0 else: xsize/2 fi,0) withcolor 0.1black+0.5white dashed evenly xscaled 0.5;
     enddef;




#_____________________________________________________________
#                                                             |
#                            POINT TYPES                      |
#_____________________________________________________________|

    def p_waterflow_MY (expr P,R,S,A)=
    U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenC;
      thfill (-.1u,.3u)--(.1u,.3u)--(0,0.4u)--cycle;
      thdraw (0,0.3u)..(.05u,.2u)..(-0.05u,0.1u)..(0,0);
    enddef;

    def p_u_probe_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenC;
      thfill (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle withcolor(0.1,0.7,0.9);
    enddef;

    def p_u_grass_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenC;
      thdraw (0.15u,0.1u)--(0,-0.2u)--(0,0.25u) withcolor (0.3,0.7,0.25);
      thdraw (0.13u,-0.2u)--(0,-0.2u)--(-0.17u,0.18u) withcolor (0.3,0.7,0.25);
    enddef;

    def p_airdraught_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenD;
      thfill (-.12u,.08u)--(0,.12u)--(.12u,.08u)--(0,.3u)--cycle;
      thdraw (-.1u,-.35u)--(0,-.28u)--(.1u,-0.35u);
      thdraw (-.1u,-.25u)--(0,-.18u)--(.1u,-.25u);
      thdraw (0,-.28u)--(0,0.15u);
    enddef;

    def p_gradient_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenD;
      thfill (-.12u,.08u)--(0,.12u)--(.12u,.08u)--(0,.3u)--cycle;
      thdraw (0,-.28u)--(0,0.15u);
    enddef;

    def p_pillar_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenC;
      thdraw (-.2u,-.2u)..(-.2u,.2u)..(.2u,.2u)..(.2u,-.2u)..cycle withcolor(1,0.5,0.1);
      thfill (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle withcolor(1,0.5,0.1);
    enddef;

    def p_stalagmite_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenC;
      thfill (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle withcolor(1,0.5,0.1);
    enddef;

    def p_stalactite_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenC;
      thdraw (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle withcolor(1,0.5,0.1);
    enddef;

    def p_station_fixed_MY (expr pos)=
    T:=identity shifted pos;
    pickup PenD;
    pair z;
    z:=(0,.7u);
    thclean (-.07u,-.07u)..(-.07u,.07u)..(.07u,.07u)..(.07u,-.07u)..cycle;
    thfill (-.07u,-.07u)..(-.07u,.07u)..(.07u,.07u)..(.07u,-.07u)..cycle;
enddef;

def p_anchor_MY (expr P,R,S,A)=
  U:=(.1u,.1u);
  T:=identity aligned A rotated R scaled S shifted P;
  q:= origin--(0,0.15u);
  pickup PenD;
  thdraw q rotated (45) shifted (-.1u,.1u);
  thdraw q rotated (135) shifted (-.1u,-.1u);
  thdraw q rotated (225) shifted (.1u,-.1u);
  thdraw q rotated (315) shifted (.1u,.1u);
  thdraw (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle;
enddef;

    # NOW SOME USER DEFINED POINTS

    def p_u_sampled_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      thdraw (-.2u,-.2u)..(-.2u,.2u)..(.2u,.2u)..(.2u,-.2u)..cycle withcolor(1,0.1,0.6);
      thfill (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle withcolor(1,0.1,0.6);
    enddef;

    def p_u_logger_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      thdraw (-.3u,-.3u)--(-.3u,.3u)--(.3u,.3u)..(.3u,-.3u)--cycle;
      thfill (-.2u,-.2u)--(-.2u,.2u)--(.2u,.2u)..(.2u,-.2u)--cycle;
    enddef;

    def p_u_waterdrip_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenD;

      thdraw (0u,0u)--(0,.15u) withcolor(0,0.1,0.7);
      thdraw (0,.3u)--(0,.45u) withcolor(0,0.1,0.7);
      thdraw (0,-.15u)--(0,-.3u) withcolor(0,0.1,0.7);
      thfill (-.18u,-.15u)--(0,-.45u)--(.18u,-.15u)--(0,-.22u)--cycle withcolor(0,0.1,0.7);
    enddef;


#_____________________________________________________________
#                                                             |
#                            LINE TYPES                       |
#_____________________________________________________________|



    ##### SPECIFIC WALL TYPES
    # BLOCKS

     def l_wall_blocks_MY (expr P)=
      T:=identity;
      cas := 0;
      dlzka := arclength P;
      if dlzka > 0:
      mojkrok:=adjust_step(dlzka, 0.3u);
      pickup PenD;
      forever:
      t_0 := arctime(cas) of P;
      t_end := arctime(cas+mojkrok) of P;
      t1 := arctime (cas + (2+1.3*normaldeviate)/10*mojkrok) of P;
      t2 := arctime (cas + (8-1.2*normaldeviate)/10*mojkrok) of P;
      t3 := arctime (cas + (2.5+1.2*normaldeviate)/10*mojkrok) of P;
      t4 := arctime (cas + (8.5-1.3*normaldeviate)/10*mojkrok) of P;
      sk := 1-.25*normaldeviate;
      q := (point t_0 of P) -- ((point t1 of P) + .05*sk*u * unitvector(thdir(P,t1) rotated (-88+normaldeviate*4))) --
      ((point t2 of P) + .05*sk*u * unitvector(thdir(P,t2) rotated (-88+normaldeviate*4))) -- (point t_end of P) -- ((point t4 of P) - .1*sk*u * unitvector(thdir(P,t4) rotated (-88+normaldeviate*4))) --
      ((point t3 of P) - .1*sk*u * unitvector(thdir(P,t3) rotated (-88+normaldeviate*4))) -- cycle;

      thdraw q withcolor(0.3,0.3,0.3);
      cas := cas + mojkrok;
      exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
      endfor;
      fi;
    enddef;

    # FLOWSTONE

    def l_wall_flowstone (expr P) =
      T:=identity;
      cas := 0;
      dlzka := arclength P;
      mojkrok:=adjust_step(dlzka, .75u);
      pickup PenC;
      p := (-.25u,-.05u)--(-.175u,.05u)--(-.1u,-.05u);
      q := (-.025u,-.05u)--(.05u,.05u)--(0.125u,-.05u);
      forever:
        t := arctime (cas + mojkrok/2) of P;
        thdraw p shifted (point t of P + .25u * unitvector(thdir(P,t) rotated -90)) withcolor(0.85,0.45,0.1);
        thdraw q shifted (point t of P + .25u * unitvector(thdir(P,t) rotated -90)) withcolor(0.85,0.45,0.1);
        cas := cas + mojkrok;
        exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
      endfor;
      pickup PenA;
      thdraw P withcolor(1,0.5,0.1);
    enddef;

    def l_wall_clay_MY (expr P) =
      T:=identity;
      cas := 0;
      dlzka := arclength P;
      mojkrok:=adjust_step(dlzka, 0.1u);
      pickup PenB;
      forever:
        t := arctime cas of P;
        thdraw ((point t of P) + (uniformdeviate 1) * .4u
                * unitvector(thdir(P,t) rotated -90));
        cas := cas + mojkrok;
        exitif cas > dlzka + (mojkrok / 3); % for rounding errors
      endfor;
      pickup PenA;
      thdraw P;
    enddef;

    def l_wall_debris_MY (expr P)=
      T:=identity;
      cas := 0;
      dlzka := arclength P;
      if dlzka > 0:
      mojkrok:=adjust_step(dlzka, 0.2u);
      pickup PenC;
      forever:
      t_0 := arctime(cas) of P;
      t_end := arctime(cas+mojkrok) of P;
      t1 := arctime (cas + (3+0.5*normaldeviate)/10*mojkrok) of P;
      t2 := arctime (cas + (8-0.5*normaldeviate)/10*mojkrok) of P;
      t3 := arctime (cas + (6+0.5*normaldeviate)/10*mojkrok) of P;
      sk := 1-.25*normaldeviate;
      q := (point t_0 of P + .02*sk*u * unitvector(thdir(P,t_0))) .. ((point t1 of P) - .06*sk*u * unitvector(thdir(P,t1) rotated (88+normaldeviate*2))) ..
      ((point t2 of P) + .03*sk*u * unitvector(thdir(P,t2) rotated (-20+normaldeviate*2))) .. ((point t3 of P) - .07*sk*u *unitvector(thdir(P,t3) rotated (-20+normaldeviate*2))) .. cycle;

      thclean q;
      thfill q withcolor(0.7,0.3,0.2);
      cas := cas + mojkrok;
      exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
      endfor;
      fi;
    enddef;

    # ICE
    def l_wall_ice_MY (expr P) =
      T:=identity;
      cas := 0;
      dlzka := arclength P;
      mojkrok:=adjust_step(dlzka, .9u);
      pickup PenC;
      p := (0,-0.15u)--(0,0.15u);
      forever:
          t1 := arctime (cas + mojkrok/6) of P;
          t2 := arctime (cas + mojkrok*2/6) of P;
          t3 := arctime (cas + mojkrok*3/6) of P;
          t5 := arctime (cas + mojkrok*5/6) of P;

          q := subpath(t1,t3) of P;
          p := (point t5 of P + .45u * unitvector(thdir(P,t5) rotated -90))--(point t5 of P + .2u * unitvector(thdir(P,t5) rotated -90));

        #thdraw  (point t of P + .25u * unitvector(thdir(P,t) rotated -90))  withcolor(0,0.7,0.9);
        thdraw q shifted ( .3u * unitvector(thdir(P,t2) rotated -90)) withcolor(0,0.7,0.9);
        thdraw p  withcolor(0,0.7,0.9);

        cas := cas + mojkrok;
        exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
      endfor;
      pickup PenA;
      thdraw P withcolor(0,0.7,0.9);
    enddef;


    #### TYPES INSIDE A PASSAGE

    # EXPOSURE OF BEDROCK

    def l_u_snowlevel_MY (expr P)=
      T:=identity;
      thdraw P withpen PenB withcolor (0,0.7,0.9) dashed evenly xscaled 0.5;
    enddef;



    # FLOWSTONE
    def l_u_wall_flowstone (expr P)=
      T:=identity;
      cas := 0;
      dlzka := arclength P;
      if dlzka > 0:
        mojkrok:=adjust_step(dlzka, 0.25u);
        pickup PenC;
        forever:
          t1 := arctime (cas + mojkrok*2.5/10) of P;
          t1b := arctime (cas + mojkrok*4/10) of P;
          t2 := arctime (cas + mojkrok*7.5/10) of P;
          t2b := arctime (cas + mojkrok*6/10) of P;
          t2a :=arctime (cas +mojkrok*7.49/10) of P;

          q := ((point t1 of P) + .1u * unitvector(thdir(P,t1) rotated -115)) ..
                ((point t1b of P) - .02u * unitvector(thdir(P,t1b) rotated -90)) ..
               ((point t2b of P) - .02u * unitvector(thdir(P,t1b) rotated -90)) ..
               ((point t2 of P) + .1u * unitvector(thdir(P,t2) rotated -65))--
               ((point t2a of P) + .1u * unitvector(thdir(P,t2a) rotated -65)) ..
               ((point t2b of P) + .02u * unitvector(thdir(P,t1b) rotated -90)) ..
               ((point t1b of P) + .02u * unitvector(thdir(P,t1b) rotated -90)) ..
               ((point t1 of P) + .1u * unitvector(thdir(P,t1) rotated -115));

          thdraw q withcolor(0.85,0.45,0.1);
          cas := cas + mojkrok;
          exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
        endfor;
      fi;
    enddef;

#_____________________________________________________________
#                                                             |
#                            AREA TYPES                       |
#_____________________________________________________________|



#_____________________________________________________________
#                                                             |
#               NOW WE INITIATE ALL THE SYMBOLS               |
#_____________________________________________________________|





    # user defined

    initsymbol("l_u_snowlevel_MY");



endcode

#_____________________________________________________________
#                                                             |
#          WE ASSIGN THE SYMBOLS TYPES AND COLOURS            |
#_____________________________________________________________|

 ## survey lines and stations
 symbol-assign point station AUT
 symbol-assign line survey MY
 symbol-assign line wall:debris MY
 symbol-assign point station MY
 symbol-assign point water-flow MY
 symbol-assign point station:fixed MY
 symbol-hide point passage-height
 symbol-colour point station-name [70 0 0]

 ## water and ice
 symbol-assign area ice MY
 symbol-assign area snow MY

 symbol-colour area ice [0 70 90]
 symbol-colour area snow [0 70 90]
 symbol-colour area water [10 35 70]
 symbol-colour point water-flow [10 35 70]
 symbol-colour point station-name [70 0 0]
 symbol-colour point station:fixed [70 0 0]

 ## formations
 symbol-colour point flowstone [85 45 10]
 symbol-color line wall:flowstone [85 45 10]
 symbol-colour point flowstone [85 45 10]
 symbol-colour point pillar [85 45 10]
 symbol-colour point stalagmite [85 45 10]
 symbol-colour point stalactite [85 45 10]
  symbol-colour point stalagmites [85 45 10]
 symbol-colour point stalactites [85 45 10]
 symbol-colour point curtain [85 45 10]
 symbol-colour point helictite [85 45 10]
 symbol-colour point soda-straw [85 45 10]
 symbol-colour point crystal [85 45 10]
 symbol-colour point popcorn [85 45 10]


 ## sedimentary fills
 symbol-assign line rock-border MY
 symbol-assign area clay MY
 symbol-assign area sand MY
 symbol-assign area pebbles MY

 symbol-colour area clay [65 35 15]
 symbol-colour line wall:clay [65 35 15]
 symbol-colour area sand [85 75 10]
 symbol-colour line border [10 35 70]

 ## misc
 symbol-assign point gradient MY
 symbol-assign line pit AUT
 symbol-assign line wall MY
 symbol-assign point breakdown-choke AUT
 symbol-assign point air-draught MY
 symbol-assign point anchor MY

endlayout

#_____________________________________________________________
#                                                             |
#          FINALLY, WE DEFINE THE LEGEND LABELS               |
#_____________________________________________________________|

#english labels
text en "point u:logger_MY"  "logger"
text en "line u:flowstone" "flowstone  wall"
text en "line u:openshaft_MY" "open shaft"
text en "line u:texture" "bedrock exposed"
text en "point u:waterdrip_MY" "water drips"
text en "point u:sampled_MY" "sample taken"
text en "line u:wall_flowstone" "wall flowstone"
text en "point u:grass_MY" "grass"


#german labels
text de "line u:openshaft_MY" "Eingangskessel"
text de "line u:texture" "Felsboden"
text de "line u:flowstone" "flächiger Sinter"
